name: Build on Windows

on:
  push:
    branches:
      - otxserv5

  pull_request:
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt
      - .github/**

jobs:
  job:
    name: ${{ matrix.os }}-${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        name: [windows]
        buildtype: [Release]
        include:
          - os: windows
            triplet: x64-windows
            packages: >
              boost-asio boost-iostreams boost-system boost-filesystem
              boost-variant boost-lockfree cryptopp curl jsoncpp
              luajit libmariadb pugixml

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Get latest CMake
        # Using 'latest' branch, the latest CMake is installed.
        uses: lukka/get-cmake@latest

      - name: Windows - remove C:/mysql*
        run: rm -r -fo C:/mysql-5.7.21-winx64
        if: contains( matrix.os, 'windows')

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v5
        with:
          vcpkgArguments: ${{ matrix.packages }}
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          vcpkgTriplet: ${{ matrix.triplet }}
          vcpkgGitCommitId: 7db401cb1ef1fc559ec9f9ce814d064c328fd767

      - name: Build with CMake
        uses: lukka/run-cmake@v3.2
        with:
          useVcpkgToolchainFile: true
          buildDirectory: ${{ runner.workspace }}/build
          cmakeBuildType: ${{ matrix.buildtype }}

      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Create datapack
        shell: powershell
        run: |
          md ${{ runner.workspace }}\otxserver\otxserver
          Copy-Item ${{ runner.workspace }}\otxserver\config.lua.dist     ${{ runner.workspace }}\otxserver\otxserver
          Copy-Item ${{ runner.workspace }}\otxserver\key.pem             ${{ runner.workspace }}\otxserver\otxserver
          Copy-Item ${{ runner.workspace }}\otxserver\LICENSE             ${{ runner.workspace }}\otxserver\otxserver
          Copy-Item ${{ runner.workspace }}\otxserver\README.md           ${{ runner.workspace }}\otxserver\otxserver
          Copy-Item ${{ runner.workspace }}\build\otxserver.exe           ${{ runner.workspace }}\otxserver\otxserver\otxserver-bin.exe
          get-childitem -path ${{ runner.workspace }}\build -filter *.dll -recurse | copy-item -destination ${{ runner.workspace }}\otxserver\otxserver
          Copy-Item ${{ runner.workspace }}\otxserver\data -Destination   ${{ runner.workspace }}\otxserver\otxserver\data
          Copy-Item -Path ${{ runner.workspace }}\otxserver\data\* -Destination ${{ runner.workspace }}\otxserver\otxserver\data -Recurse
          Compress-Archive -Path ${{ runner.workspace }}\otxserver\otxserver -DestinationPath ${{ runner.workspace }}\otxserver.zip

      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Upload datapack
        uses: actions/upload-artifact@v2
        with:
          name: otxserver-${{ matrix.os }}-${{ matrix.buildtype }}-${{ github.sha }}
          path: ${{ runner.workspace }}/otxserver.zip
        if: contains( matrix.os, 'windows')
